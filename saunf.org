:PROPERTIES:
:ID:       db01d149-8e60-4635-ad88-447b8c33265e
:END:
#+title: Saunf

Saunf is an insolent project management software with a simple goal

#+begin_quote
Saunf should allow me to do my project management the way I like, with an
org-mode file in cozy cuddle of Emacs, without letting graybeardlessness of my
teammates holding me back
#+end_quote

I am building Saunf to simplify managing software projects for me, while
allowing people I work with to use the tools they like. At its infancy, Saunf
should enable my current workflow of managing a project from a single [[https://orgmode.org/][org]] file:

- I write a lot of introductory documentation. Saunf should allow me to pick
  parts from this document and build a readme file that isn't a (too big) scary
  wall of text
- I keep a list of todo items within the [[saunf-doc]]. Saunf should allow me to
  sync these with Github issues.
- I maintain a glossary for every project. Saunf should enable me to utilize
  this glossary to more effectively achieve my goal of establishing a ubiquitous
  language.

I have a lot of (rough) fantasies of expanding the scope to replace Jira and
more. I imagine a tool which can allow me to see a project from bird's eye view
as architecture diagrams, to which I can then zoom into get more detail, zooming
in further and further to end up reading source code. A tool which would allow
me to trace every single line of code, every domain object to the requirements
that demanded its existence. Projects where things are connected with minimum
effort.

For starters, let's try to bring together the information that usually spreads
over several tools with no convergence point.

* Documentation

** Usage
:PROPERTIES:
:CUSTOM_ID: usage
:END:

Saunf is in its infancy, so things are likely to change wildly. For now, this
how you use saunf:

1. Create a =saunf.dhall= in root of your project to configure saunf
2. Describe your project using org-mode markup in [[saunf-doc]]

*** CLI

Saunf CLI usage can be obtained using running =saunf --help=

*** Saunf Conf(iguration)

Configuration of saunf is expected in [[https://dhall-lang.org/#][dhall format]]. It is okay if you are not
familiar with dhall. Saunf don't have a lot of configuration, so you won't be
needing a lot of it.

To configure saunf, create =saunf.dhall= file in root of your project.
Saunf takes following configuration:

| Name           | Type   | Is Required? | Remarks                                                    |
|----------------+--------+--------------+------------------------------------------------------------|
| readmeTemplate | Text   | No           | Details below                                              |
| github         | Object | No           | Optional github configuration. Used for project management |
| github.user    | Text   | Yes          |                                                            |
| github.repo    | Text   | Yes          |                                                            |
| github.token   | Text   | Yes          | [[https://github.com/settings/tokens][Github OAuth token]]                                         |

Note in example below that optional fields in Dhall need to be prefixed with
=Some=, to explicitly express that a value is optional.

For example saunf configuration, you check [[./saunf.dhall][saunf.dhall]] in this project itself.
You can also create a default saunf conf by using =saunf init= command.

**** =readmeTemplate=

This is a standard [[https://hackage.haskell.org/package/pandoc/docs/Text-Pandoc-Templates.html][pandoc template]] with small saunf-specific syntax.

Within the readme template, you have access to =title= and =description=
variables, which you can use by wrapping them in =$$=-s e.g =$$title$$=

1. =title= is the title set with =#+title:= attribute in saunf-doc
2. =description= is the text on top of your saunf-doc before any section starts

Following saunf-specific syntax is available:

1. =Section Injection=: Saunf allow you to inject entire sections from your
   saunf-doc inside the readme. Level of the section in saunf-doc is
   irrelevant; you can mention the level of injected section like this:

   #+begin_src markdown
   ### $$#usage$$
   #+end_src

   In this example, =usage= is the =CUSTOM_ID= of the section getting
   injected, and =3= is the level at which it will be injected. i.e =H3= will
   be used for the heading of =usage= section, and all its sub-headings will
   be set as =3 + <subheading-level>=

* Modules

** Documentation Management
:PROPERTIES:
:CUSTOM_ID: doc-management-module
:END:

- Reduce busy work of keeping multiple tools up to date e.g a person shouldn't
  need to put time in updating a wiki (e.g confluence), a public readme (e.g
  on github) etc with same information
- Help establish a ubiquitous language to discuss the project
  - Easily maintain a glossary of what certain terms mean in the project
  - Easily/automatically link the glossary terms whenever they are used
    elsewhere in documentation, or issues, commit messages, branch names etc
- Create a documentation website?

** Issue Management
:PROPERTIES:
:CUSTOM_ID: issue-management-module
:END:

Help manage the user-stories, bugs, technical debts and such.

- Creating a new issue should be as easy as dropping in a line in the saunf-doc
- Support syncing the issues with an external tool
  - Issues added/modified in saunf-doc should get pushed to the remote tool
  - Issues added/modified in remote tool should be brought back to the saunf doc

* Milestones

** MVP
:PROPERTIES:
:CUSTOM_ID: mvp
:END:

At its bare minimum, Saunf should
- sync readme file
  - [ ] Push changes from saunf-doc to readme
  - [ ] Pull changes from readme to saunf-doc
  - [ ] Enrich readme with glossary terms
- sync github issues
  - [ ] Push new issues to github
  - [ ] Push changed issues to github
  - [ ] Pull new issues from github
  - [ ] Pull changed issues from github
  - [ ] Enrich github issues with glossary terms

* Bugs                                                                  :bug:
:PROPERTIES:
:CATEGORY: issues
:END:
** TODO =readme push= don't export tables

Tables in saunf-doc gets exported as =[TABLE]= in readme.md. Pandoc itself is
able to export org tables, but saunf for some reason is behaving like this.
** TODO =gh-issues push= consider "DONE" issues as new

Concerned function: =filterNewIssues= at saunf/src/Saunf/Issue.hs:94

* Epics

** Readme
:PROPERTIES:
:CATEGORY: issues
:END:

*** TODO Create a readme.org file from a simple readme template given in saunf-doc
*** TODO Links to glossary terms should be added as link titles in readme
so that github users can see the term definition by hovering over it.

** Github Issues
:PROPERTIES:
:CATEGORY: issues
:END:

*** TODO User should be able to push new issues to github issues
Glossary terms introduced:
1. [[Issue]]
2. [[New Issue]]

*** TODO Newly created issues should update saunf-doc with the issue ID

When an issue is created, it should add =ISSUE_ID= property to the issue subtree
in saunf-doc
*** TODO Allow pushing a single issue to github
*** TODO Create emacs package which can interact with Saunf
- [ ] Push readme
- [ ] Push issues to github
- [ ] Push an individual issue to github
*** TODO User should be able to update github issues
- [ ] Close and re-open issues
- [ ] Change issue title and description
*** TODO Creating an issue should update tags as github labels
*** TODO User should be able to pull new issues from github issues
*** TODO User should be able to pull changes to existing issues from github issues
*** TODO Create subtasks as separate issues in github, and replace in parent issues as links

When an issue in saunf-doc has any more TODO items, create them as separate
issues in github. In the parent issue, instead of writing the whole subtree,
write a link to the subtask instead.

* Tasks
:PROPERTIES:
:CATEGORY: issues
:END:
** TODO Add =fmt= as nix devshell command which format all source files :chore:
https://github.com/numtide/devshell

Format:
- flake.nix using nixpkg-fmt
- saunf.dhall using dhall
- src/**/*.hs using ormolu
- test/**/*.hs using ormolu
- app/**/*.hs using ormolu
- saunf.cabal using https://github.com/sdiehl/cabal-edit

** TODO Add =lint= as nix devshell command to run lint on all source files :chore:

Lint:
- flake.nix if possible
- saunf.dhall using dhall
- src/**/*.hs using hlint
- app/**/*.hs using hlint
- test/**/*.hs using hlint
- saunf.cabal using https://github.com/sdiehl/cabal-edit

** TODO Use cabal mixins technique to use Relude as default prelude  :chore:
- Remove the =NoImplicitPrelude= language pragmas
** TODO Add ability to configure todo statuses in saunf-conf   :enhancement:
** TODO Make pandoc write org-mode without loss [2/5]

Pandoc treats converting documents as org-mode's exporting. This make it lose
information when a document is read and written back. Saunf can't afford that
since it works on a document instead of exporting it.

Here is a growing list of behavior where Pandoc loses/changes meaning in an
org-mode document:

*** DONE Unrecognized options in org preface aren't written back in org-mode meta
CLOSED: [2021-04-23 Fri 22:11]

Pandoc adds them in document body as RawBlocks.

*** DONE Pandoc don't write preface back in org-mode
CLOSED: [2021-04-23 Fri 22:11]

Some of the preface data, e.g title is present in Pandoc Meta though.

*** TODO Links to targets get written back with a =#= prefix.

If we have a target =<<target>>=, and a link =[[target]]=, Pandoc writes it back
as =[[#target][target]]=, which breaks the link in org-mode. Org-mode tries to
link =#=-prefixed links to CUSTOM_IDs.

*** TODO Links to targets are case-sensitive

If we have a target =<<Target>>=, and a link as =[[target]]=, Pandoc considers
it a broken link and write the link back as =/target/= (i.e italicized
plain-text).

*** TODO Export options in org-preface are lost when a =Pandoc= is created

Export options, e.g =#+OPTIONS: H:9= are not present even in AST produced by
Pandoc.

* Ideas
** Task oriented development
- Add commands which allow switching to tasks in Saunf
  On switching a task, do a bunch of things like
  - Switch to a different git branch. Maybe somehow make guesses on whether it's
    going to be a feature/bugfix/hotfix branch, and based on that decide from
    where to start this branch (e.g develop or master)
- Allow adding a list of "relevant files" with a task
  - Automatically open these files in the editor when the task is switched
  - Automatically add files to this list as the task branch is changed
** Magit like Emacs interface for Saunf
A =saunf status= command which tells information about which changes have been
made, which task the user is working on (if we do TOD) etc.

We'll probably need to maintain a local state for this (which isn't saunf doc),
not sure if it is worth it. I wonder if we can get away with using git instead.
** User defined data transformers for injecting text in readme

Generating a readme will eventually need more processing than just inserting
sections. Perhaps it will make sense to utilize org-mode's babel feature to
write snippets in any language, make them return a well structured data, and
inject that in the readme template. Perhaps we can use this to inject user
transformed text in other places as well.
** Manage Github Wiki
Since we are maintaining a glossary, perhaps saunf should automatically create a
wiki page with link-able glossary entries. Saunf can then add these links to
anywhere the glossary term is linked (e.g in Readme, [[issue]] etc)

Saunf can create a =.saunf= working directory, in which it clones the github
wiki repository, make changes, commits and pushes them automatically
** A DSL of operations
Instead of directly doing the operations, perhaps saunf can create a DSL which
in turn performs those changes. This DSL can allow us to add a review step to
allow user to see what changes saunf is going to make and how.
* Glossary
:PROPERTIES:
:CUSTOM_ID: glossary
:END:
- <<Saunf-doc>> :: The document (org-mode file) which keeps all the documentation
  related to the project.
- <<Issue>> :: A statement made by a user to request a change, report a bug, or
  ask a question.

  Technically an issue is an org-subtree which satisfies following conditions:

  1. It has a valid org TODO directive
  2. One of following
     1. Immediate parent of the subtree has =CATEGORY: issues= property
     2. Subtree itself has =CATEGORY: issue=

- <<New Issue>> ::  An issue is considered "new", if
  - Todo state of issue is "Todo"
  - Issue don't have an =ISSUE_ID: X= property

- <<Epic>> :: A named collection of [[issue][issues]]
